// responsive mixins
// I use these for my quasi-mobile first style, so they're only min-width
// rules.  Besides mobile.  This will make your life easier, trust me.
@mixin break($media) {
  @if $media == mobile-only {
    @media screen and (max-width:$break-small) {@content;}
  }
  @else if $media == small {
    @media screen and (min-width:$break-small +1) {@content;}
  }
  @else if $media == medium {
    @media screen and (min-width:$break-medium +1) {@content;}
  }
  @else if $media == large {
    @media screen and (min-width:$break-large +1) {@content;}
  }
}


// these mixins I pulled in from Twitter Bootstrap, because they're really useful
// If you've been frozen in an army experiment and you don't know what bootstrap
// is, you can read more here: http://getbootstrap.com/
// Opacity
@mixin opacity($opacity) {
  opacity: $opacity / 100;
  filter: alpha(opacity=$opacity);
}

@mixin inline-block() {
  display: inline-block;
  @include ie7-inline-block();
}

// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}